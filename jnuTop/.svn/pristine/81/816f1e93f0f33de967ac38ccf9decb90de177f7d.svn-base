package com.stylefeng.guns.modular.business.service.impl;

import static org.hamcrest.CoreMatchers.nullValue;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;

import javax.annotation.Resource;

import org.apache.poi.ss.formula.functions.T;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.stylefeng.guns.common.exception.NonullException;
import com.stylefeng.guns.common.exception.RepeatException;
import com.stylefeng.guns.modular.business.dao.SampleDao;
import com.stylefeng.guns.modular.business.entity.Sample;
import com.stylefeng.guns.modular.business.service.IFileIOAuxiliaryService;

@Service
public class FileIOAuxiliaryServiceImpl implements IFileIOAuxiliaryService {
	@Resource
	private SampleDao sampleDao;

	public <T> void InsertCheck(List<T> list, String entityName) throws NonullException, RepeatException, Exception {

		int start = 0, end = list.size() - 1;
		System.out.println("对象为：" + entityName.trim() + " 准备插入数据库 start:" + start + " end:" + end);

		if ("com.stylefeng.guns.modular.business.entity.Sample".equals(entityName.trim())) {
			int i = start;
			// try {
			for (; i <= end; i++) {
				Sample sample = (Sample) list.get(i);

				// System.out.println("将要插入：" + sample.getDetectionItem()+" "+
				// sample.getSampleNumber());
				String detection_item = sample.getDetectionItem();
				String sample_number = sample.getSampleNumber();
				List<Sample> samples = sampleDao.selectByCondition(detection_item, sample_number);

				if (samples != null) {
					// System.out.println("获取到的值为：" + sample + " delete=" +
					// sample.getDeleted());
					for (int j = 0; j < samples.size(); j++) {
						if (samples.get(j).getDeleted() == 1) {
							continue;
						} else {
							System.out.println("第" + (i + 1) + "条记录数据重复");
							throw new RepeatException(i);
						}
					}
					sampleDao.insert((Sample) list.get(i));
				} else {
					sampleDao.insert((Sample) list.get(i));
				}
				// }
			}
			// catch (Exception e) {
			// TODO: handle exception
			// System.out.println("第" + (i + 1) + "条插入出错：" + e.getMessage());
			// throw new Exception("第" + (i + 1) + "条插入出错：" + e.getMessage());
			// }
		} else {
			System.out.println("没有找到该对象的Dao");
			throw new Exception("没有找到该对象的Dao");
		}

	}

	@Override
	public void saveAttachment(MultipartFile uploadFile, String entityName, String id, String attachmentSaveURL)
			throws IOException {

		InputStream inputStream = uploadFile.getInputStream();
		String fileName = uploadFile.getOriginalFilename();
		String attachmentPath = attachmentSaveURL + fileName;
        System.out.println("进入saveAttachment");
		recordAttachmentPath(entityName, id, attachmentSaveURL,fileName);
		
		OutputStream os = null;
		try {

			// 1K的数据缓冲
			byte[] bs = new byte[1024];
			// 读取到的数据长度
			int len;
			// 输出的文件流保存到本地文件

			File tempFile = new File(attachmentSaveURL);

			if (!tempFile.exists()) {
				tempFile.mkdirs();
			}
			os = new FileOutputStream(tempFile.getPath() + File.separator + fileName);
			// 开始读取
			while ((len = inputStream.read(bs)) != -1) {
				os.write(bs, 0, len);
			}

		} catch (IOException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 完毕，关闭所有链接
			try {
				os.close();
				inputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 将附件路径存入
	 * 
	 * @param entityName
	 *            要调用的类的名字
	 * @param id
	 *            具体要保存路径的类id
	 * @param attachmentSaveURL
	 *            附件保存的路径
	 * @param fileName
	 *            附件名
	 */
	private void recordAttachmentPath(String entityName, String id, String attachmentSaveURL, String fileName) {

		String AttachmentPath = attachmentSaveURL + fileName;
        System.out.println("附件准备写入类 获取到的id为"+id);
		if ("com.stylefeng.guns.modular.business.entity.Sample".equals(entityName.trim())) {
			Sample sample = sampleDao.selectById(id);
			String oldAttachmentPath = sample.getAttachmentPath();
			if(oldAttachmentPath==null||"".equals(oldAttachmentPath)){
				 System.out.println("附件写入的路径为"+AttachmentPath);
				sample.setAttachmentPath(AttachmentPath);
			}
			else {
				System.out.println("附件写入的路径为"+oldAttachmentPath + "," + AttachmentPath);
				sample.setAttachmentPath(oldAttachmentPath + "," + AttachmentPath);
			}
			sampleDao.updateById(sample);
		}
	}
}
