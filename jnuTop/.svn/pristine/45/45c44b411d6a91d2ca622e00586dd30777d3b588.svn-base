package com.stylefeng.guns.modular.business.controller;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.naming.NoPermissionException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSONObject;
import com.stylefeng.guns.common.annotion.record.BusinessRecord;
import com.stylefeng.guns.common.constant.state.BizType;
import com.stylefeng.guns.common.constant.state.RecordType;
import com.stylefeng.guns.common.constant.tips.Tip;
import com.stylefeng.guns.common.controller.BaseController;
import com.stylefeng.guns.common.exception.BizExceptionEnum;
import com.stylefeng.guns.common.exception.BussinessException;
import com.stylefeng.guns.common.exception.ErrorWrapException;
import com.stylefeng.guns.common.exception.FileNotExistException;
import com.stylefeng.guns.common.exception.NonullException;
import com.stylefeng.guns.common.exception.RepeatException;
import com.stylefeng.guns.modular.business.dao.SampleDao;
import com.stylefeng.guns.modular.business.entity.Sample;
import com.stylefeng.guns.modular.business.service.IFileIOAuxiliaryService;
import com.stylefeng.guns.modular.business.service.ISampleService;

/**
 * 样本控制器
 *
 * @author fengshuonan
 * @author djb
 * @Date 2017-08-09 14:40:25
 */
@Controller
@RequestMapping("/sample")
public class SampleController extends BaseController {

	private String PREFIX = "/business/sample/";

	private Logger log = LoggerFactory.getLogger(this.getClass());
	@Resource
	ISampleService sampleService;
	@Autowired
	private SampleDao sampleDao;
	@Resource
	private IFileIOAuxiliaryService fileIOAuxiliaryService;

	/**
	 * 跳转到样本首页
	 */
	@RequestMapping("")
	public String index() {
		return PREFIX + "sample.html";
	}

	/**
	 * 跳转到添加样本
	 */
	@RequestMapping("/sample_add")
	public String sampleAdd() {
		return PREFIX + "sample_add.html";
	}

    /**
     * 跳转到修改样本
     */
    @RequestMapping(value = "/sample_update/{sample_id}")
    public String sampleUpdate(@PathVariable Integer sample_id, Model model) {
        Sample sample = sampleService.findSampleById(sample_id);
        model.addAttribute(sample);
       // LogObjectHolder.me().set(sample);
        return PREFIX + "sample_edit.html";
    }
 
	/**
	 * 跳转到Excel导入页面
	 *
	 * @return
	 */
	@RequestMapping("/sample_uploadFile")
	public String sampleUpload() {
		return PREFIX + "sample_uploadFile.html";
	}
    
	/**
	 * 跳转到附件上传页面
	 *
	 * @return
	 */
	@RequestMapping("/sample_uploadAttachment/{SampleId}")
	public String sampleUploadAttachment(Model model,@PathVariable("SampleId") String id) {
		model.addAttribute("SampleId", id);
		return PREFIX + "sample_uploadAttachment.html";
	}


	/**
	 * @param condition
	 * @return 返回样本信息列表
	 * @author 罗健金
	 * @date 2017年8月17日
	 */
	@RequestMapping(value = "/list")
	@ResponseBody
	public Object list(String condition) {
		List<Map<String, Object>> samples = sampleDao.selectSamplesByCondition(condition);
		return samples;
	}


	/**
	 * 新增样本
	 */
	@RequestMapping(value = "/add")
	@ResponseBody
	public Object add(@Valid Sample sample, BindingResult bindingResult) throws NoPermissionException {
		if (bindingResult.hasErrors()) {
			throw new BussinessException(BizExceptionEnum.REQUEST_NULL);
		}
		sample.setSampleId(null);
		try {
			Integer insertedRow = sampleDao.insert(sample);
			if (insertedRow <= 0) {
				throw new BussinessException(BizExceptionEnum.SERVER_ERROR);
			}
		} catch (Exception e) {
			throw new BussinessException(BizExceptionEnum.SAMPLE_REPEAT_ERROR);
		}
		return super.SUCCESS_TIP;
	}



	/**
	 * 修改样本
	 */
	@RequestMapping(value = "/update")
	//@BusinessRecord(bizType = BizType.sample, recordType = RecordType.UPDATE, key = "sampleId", seperator = "</br>")
	//TODO 标记记录的方法用不了 报空指针错误
	@ResponseBody
	public Object update(Sample sample) {
		sampleService.updateSample(sample);
		return SUCCESS_TIP;
	}

    /**
     * 删除样本
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public Object delete(String[] sampleId) {
        sampleService.deleteById(sampleId);
        return SUCCESS_TIP;
    }

	public void setSampleService(ISampleService sampleService) {
		this.sampleService = sampleService;
	}

	public void setSampleDao(SampleDao sampleDao) {
		this.sampleDao = sampleDao;
	}

	/**
	 * 导入excel文件
	 * 
	 * @author djb
	 * @date 2017年8月18日
	 * @return 异常或者成功
	 * @throws Exception 
	 */
	@RequestMapping(value = "/importExcel", method = RequestMethod.POST)
	@ResponseBody
	public <T> Tip insertExcel(@RequestParam("uploadExcel") MultipartFile uploadFile, String entityName, String map,
			String requiredField, String title, String specialfieldName) throws Exception {
		System.out.println("controller接受到了 " + uploadFile.getOriginalFilename());
		System.out.println("entityName为： " + entityName);
		System.out.println("map为： " + map);
		System.out.println("specialfieldName为： " + specialfieldName);

		try {
			fileIOAuxiliaryService.insertExcel(uploadFile, entityName, map, requiredField, title, specialfieldName);
		} catch (NonullException e) {
			throw new ErrorWrapException(e.getErrorInfo(), e.getErrorInfo());
		} catch (RepeatException e) {
			System.out.println("???"+e.getErrorInfo());
			ErrorWrapException d=new ErrorWrapException(e.getErrorInfo(),e.getErrorInfo());
			System.out.println("!!!"+d.getErrorInfo());
			throw d;
		} catch (Exception e) {
			System.out.println("错误类型：" + e.getMessage());
			throw new ErrorWrapException("文件格式错误", e.getMessage());
		}
		return SUCCESS_TIP;
	}

	/**
	 * 导出excel文件
	 *
	 * @param ids
	 *            需要导出的样本的id。title 需要导出的表头。needExports
	 *            需要导出的字段。以上均为（xxx,xxxx,xxx格式）
	 * @return 异常或者路径名和文件名
	 * @throws Exception
	 * @author djb
	 * @date 2017年8月18日
	 */
	@RequestMapping("/outputExcel")
	@ResponseBody
	public JSONObject outputExcel(String ids, String title, String needExports) throws Exception {
		JSONObject result;
		System.out.println("ids为：" + ids);
		System.out.println("title为：" + title);
		try {
			result = fileIOAuxiliaryService.outputExcel(ids, title, needExports);
		} catch (FileNotFoundException e) {
			throw new ErrorWrapException("文件正在被使用", e.getMessage());
		} catch (IOException e) {
			throw new ErrorWrapException(e.getMessage(), e.getMessage());
		}
		return result;
	}
	
	/**
	 * 上传附件
	 * 
	 * @author djb
	 * @date 2017年8月25日
	 * @return 异常或者成功
	 * @throws Exception 
	 */
	@RequestMapping(value = "/importAttachment", method = RequestMethod.POST)
	@ResponseBody
	public <T> Tip importAttachment(@RequestParam("uploadAttachment") MultipartFile uploadFile,String entityName,String SampleId) throws Exception {
		System.out.println("controller接受到了 " + uploadFile.getOriginalFilename()+" id为"+SampleId);

		try {
			fileIOAuxiliaryService.saveAttachment(uploadFile,entityName,SampleId);
		} 
		catch (Exception e) {
			System.out.println("附件保存错误类型：" + e.getMessage());
			throw new ErrorWrapException("附件保存错误", e.getMessage());
		}
		return SUCCESS_TIP;
	}
	
	/**
	 * 下载附件
	 * 
	 * @author djb
	 * @date 2017年8月26日
	 * @return 异常或者成功
	 * @throws Exception 
	 */
	@RequestMapping(value = "/downloadAttachment", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject downloadAttachment(@RequestParam("entityName")String entityName,@RequestParam("sample_id")String id) throws Exception {
		System.out.println("sample_id为"+id);
		JSONObject result = null;
		try {
			result=fileIOAuxiliaryService.downloadAttachment(entityName, id);	
		} 
		catch (FileNotExistException e) {
			throw new ErrorWrapException(e.getErrorInfo(), e.getErrorInfo());
		}
		catch (Exception e) {
			throw new ErrorWrapException("该记录没有附件可下载", e.getMessage());
		}
		return result;
	}
	
	/**
	 * 将生成的文件网络传输到客户端
	 *
	 * @param
	 * @return 异常或者成功
	 * @throws Exception
	 * @author djb
	 * @date 2017年8月18日
	 */
	@RequestMapping("/ajaxDownload")
	public void ajaxDownload(HttpServletResponse response, HttpServletRequest request) throws Exception {
		
		System.out.println("准备下载");
		try {
			fileIOAuxiliaryService.ajaxDownload(response, request);
		} catch (Exception e) {
			throw new ErrorWrapException("下载失败", e.getMessage());
		}
	}

}